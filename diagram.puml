@startuml

' STATIC
' Style
hide AppTest
hide empty members
skinparam fixCircleLabelOverlapping true
skinparam classAttributeIconSize 0
set separator none
scale 1.5

' Missing associations
Bouncers "1"-left->"*" Bouncable: stores >
Bouncer *->"1" Renderer: uses >
'TODO: should renderer be represented in AbstractShapeFactory ?

' Hidden links to arrange the 3 blocks
BorderedRenderer$Instance .[hidden]. AbstractShapeFactory
Displayer -[hidden]up- FilledSquare

' Post operations
' REMOVE


'for Bouncers
' .*bouncers: .*<Bouncable>
'for Bouncer
' - renderer: Renderer

' ENDSTATIC

abstract class Bouncer {

- shape: Shape
- moveVector: Point2D.Double
+ draw(): void
+ getShape(): Shape
# getNewBoundsAfterMove(): Rectangle2D
}


class FilledFactory {
- {static} RENDERER: Renderer
+ {static} getInstance(): FilledFactory
+ createSquare(): Square
+ createCircle(): Circle
}


class FilledFactory$Instance {
- {static} INSTANCE: FilledFactory
}

class BorderedFactory {
- {static} RENDERER: Renderer
+ {static} getInstance(): BorderedFactory
+ createSquare(): Square
+ createCircle(): Circle
}


class BorderedFactory$Instance {
- {static} INSTANCE: BorderedFactory
}

class BorderedSquare {
+ getColor(): Color
}

interface Displayer {
~ getWidth(): int
~ getHeight(): int
~ getGraphics(): Graphics2D
~ repaint(): void
~ setTitle(title: String): void
~ addKeyListener(adapter: KeyAdapter): void
}

class FilledCircle {
+ getColor(): Color
}

class BorderedRenderer {
+ {static} getInstance(): BorderedRenderer
+ display(g2d: Graphics2D, bouncable: Bouncable): void
}

class BorderedRenderer$Instance {
- {static} INSTANCE: BorderedRenderer
}

class BorderedCircle {
+ getColor(): Color
}

abstract class AbstractShapeFactory {
+ {abstract}createSquare(): Square
+ {abstract}createCircle(): Circle
}

class FilledRenderer {
+ {static} getInstance(): FilledRenderer
+ display(g2d: Graphics2D, bouncable: Bouncable): void
}

class FilledRenderer$Instance {
- {static} INSTANCE: FilledRenderer
}

abstract class Circle {
+ move(): void
}

class Display {
- {static} DEFAULT_WIDTH: int
- {static} DEFAULT_HEIGHT: int
- frame: JFrame
- panel: JPanel
- image: Image
+ {static} getInstance(): Display
+ getWidth(): int
+ getHeight(): int
+ getGraphics(): Graphics2D
+ repaint(): void
+ setTitle(title: String): void
+ addKeyListener(adapter: KeyAdapter): void
- createImage(): Image
}


class Display$Instance {
- {static} INSTANCE: Display
}

interface Bouncable {
~ draw(): void
~ move(): void
~ getColor(): Color
~ getShape(): Shape
}

class Bouncers {
- {static} EXIT_KEY: int
- {static} CLEAR_KEY: int
- {static} ADD_FILLED_KEY: int
- {static} ADD_BORDERED_KEY: int
- {static} ADD_QTY: int

+ {static} main(args: String): void
- addBouncers(factory: AbstractShapeFactory): void
+ run(): void
}


interface Renderer {
~ display(g2d: Graphics2D, bouncable: Bouncable): void
}

class AppTest {
}
class FilledSquare {
+ getColor(): Color
}

abstract class Square {
+ move(): void
}

class Util {
- {static} MAX_SIZE: int
- {static} MIN_SIZE: int
- {static} MAX_SPEED: int
+ {static} REFRESH_RATE: int
- {static} random: Random
- {static} display: Display
+ {static} getRandomPoint(): Point2D.Double
+ {static} getRandomMove(): Point2D.Double
+ {static} getRandomSize(): int
}




Bouncable <|.. Bouncer
AbstractShapeFactory <|-- FilledFactory
FilledFactory +.. FilledFactory$Instance
AbstractShapeFactory <|-- BorderedFactory
BorderedFactory +.. BorderedFactory$Instance
Square <|-- BorderedSquare
Circle <|-- FilledCircle
Renderer <|.. BorderedRenderer
BorderedRenderer +.. BorderedRenderer$Instance
Circle <|-- BorderedCircle
Renderer <|.. FilledRenderer
FilledRenderer +.. FilledRenderer$Instance
Bouncer <|-- Circle
Displayer <|.. Display
Display +.. Display$Instance
Square <|-- FilledSquare
Bouncer <|-- Square
@enduml
